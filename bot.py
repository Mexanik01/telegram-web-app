import asyncio
import json
import logging
import aiosqlite
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage

async def init_db():
    async with aiosqlite.connect("database.db") as db:
        await db.execute("""
        CREATE TABLE IF NOT EXISTS staff (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT UNIQUE NOT NULL
        )
        """)
        await db.execute("""
        CREATE TABLE IF NOT EXISTS reports (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            staff_id INTEGER NOT NULL,
            date TEXT NOT NULL,
            count INTEGER NOT NULL,
            FOREIGN KEY(staff_id) REFERENCES staff(id),
            UNIQUE(staff_id, date)
        )
        """)
        await db.commit()

API_TOKEN = '8018442623:AAGpqIhWdGD67BgLFwMslOHw5P4sIaI26zo'
GROUP_CHAT_ID = -1002893104615  # –í–∞—à ID –≥—Ä—É–ø–ø—ã –¥–ª—è –æ—Ç—á—ë—Ç–æ–≤
ADMIN_IDS = {6039652860, 1334728666}  # ID –∞–¥–º–∏–Ω–æ–≤

DATA_FILE = 'data.json'
LOG_FILE = 'reports_log.json'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# --- FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ ---
class AddPhoto(StatesGroup):
    waiting_photo_count = State()
    waiting_staff_name = State()

# --- FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ---
class AddStaff(StatesGroup):
    waiting_new_staff_name = State()

# --- FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ---
class EditStaffName(StatesGroup):
    waiting_old_name = State()
    waiting_new_name = State()

# --- FSM –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ---
class DeleteStaff(StatesGroup):
    waiting_staff_name = State()

# --- FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞ (–¥–∞–Ω–Ω—ã—Ö –ø–æ —Ñ–æ—Ç–æ) ---
class EditReport(StatesGroup):
    waiting_staff_name = State()
    waiting_date = State()
    waiting_new_count = State()

# –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        return {}

def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

def load_log():
    try:
        with open(LOG_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        return []

def save_log(log):
    with open(LOG_FILE, 'w', encoding='utf-8') as f:
        json.dump(log, f, ensure_ascii=False, indent=4)

reports_log = load_log()

def is_admin(user_id):
    return user_id in ADMIN_IDS

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –∏–∫–æ–Ω–∫–∞–º–∏
def main_menu(user_id):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("–û—Ç—á—ë—Ç –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ üìã"))
    if is_admin(user_id):
        kb.add(KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ‚ûï"))
        kb.add(KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ üì∑"))
        kb.add(KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ‚úèÔ∏è"))
        kb.add(KeyboardButton("–£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ üóëÔ∏è"))
        kb.add(KeyboardButton("–û—Ç—á—ë—Ç —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π üì§"))
    return kb

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è inline –∫–Ω–æ–ø–æ–∫
def get_staff_keyboard(prefix=""):
    data = load_data()
    kb = InlineKeyboardMarkup(row_width=1)
    for name in data.keys():
        kb.insert(InlineKeyboardButton(name, callback_data=f"{prefix}{name}"))
    return kb

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ñ–æ—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
        reply_markup=main_menu(message.from_user.id)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message_handler()
async def main_menu_handler(message: types.Message, state: FSMContext):
    text = message.text
    user_id = message.from_user.id

    if text == "–û—Ç—á—ë—Ç –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ üìã":
        data = load_data()
        today = datetime.now().strftime("%Y-%m-%d")
        if not data:
            await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return
        lines = [f"*–û—Ç—á—ë—Ç –∑–∞ {today}:*"]
        for name, records in data.items():
            day_count = records.get(today, 0)
            total_count = sum(records.values())
            lines.append(f"‚Ä¢ *{name}* ‚Äî —Å–µ–≥–æ–¥–Ω—è: _{day_count}_, –≤—Å–µ–≥–æ: _{total_count}_")
        await message.answer("\n".join(lines), parse_mode='Markdown')

    elif text == "–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ‚ûï":
        if not is_admin(user_id):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
            return
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:")
        await AddStaff.waiting_new_staff_name.set()

    elif text == "–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ üì∑":
        if not is_admin(user_id):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
            return
        data = load_data()
        if not data:
            await message.answer("–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö —Å–Ω–∞—á–∞–ª–∞.")
            return
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=get_staff_keyboard(prefix="addphoto_"))

    elif text == "–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ‚úèÔ∏è":
        if not is_admin(user_id):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
            return
        data = load_data()
        if not data:
            await message.answer("–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏:", reply_markup=get_staff_keyboard(prefix="editname_"))

    elif text == "–£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ üóëÔ∏è":
        if not is_admin(user_id):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
            return
        data = load_data()
        if not data:
            await message.answer("–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=get_staff_keyboard(prefix="delstaff_"))

    elif text == "–û—Ç—á—ë—Ç —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π üì§":
        if not is_admin(user_id):
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
            return
        report = create_report()
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç", callback_data="send_report"),
            InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_from_report")
        )
        keyboard.add(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_report"))
        await message.answer(report, parse_mode='Markdown', reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == 'edit_from_report')
async def callback_edit_from_report(call: types.CallbackQuery, state: FSMContext):
    if not is_admin(call.from_user.id):
        await call.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return
    data = load_data()
    if not data:
        await call.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞:", reply_markup=get_staff_keyboard(prefix="editreport_"))
    await call.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@dp.callback_query_handler(lambda c: c.data.startswith("addphoto_"))
async def callback_addphoto(call: types.CallbackQuery, state: FSMContext):
    name = call.data[len("addphoto_"):]
    await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {name} –∑–∞ —Å–µ–≥–æ–¥–Ω—è:")
    await AddPhoto.waiting_photo_count.set()
    await state.update_data(staff_name=name)
    await call.answer()

@dp.message_handler(state=AddPhoto.waiting_photo_count)
async def process_photo_count(message: types.Message, state: FSMContext):
    try:
        count = int(message.text)
        if count < 0:
            raise ValueError
    except ValueError:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    data = load_data()
    state_data = await state.get_data()
    name = state_data['staff_name']
    today = datetime.now().strftime("%Y-%m-%d")

    if name not in data:
        data[name] = {}

    if today not in data[name]:
        data[name][today] = 0

    data[name][today] += count
    save_data(data)

    await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {count} —Ñ–æ—Ç–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É {name} –∑–∞ {today}.")
    await state.finish()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@dp.message_handler(state=AddStaff.waiting_new_staff_name)
async def process_new_staff_name(message: types.Message, state: FSMContext):
    new_name = message.text.strip()
    if not new_name:
        await message.reply("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    data = load_data()
    if new_name in data:
        await message.reply("–¢–∞–∫–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–∂–µ –µ—Å—Ç—å.")
        await state.finish()
        return

    data[new_name] = {}
    save_data(data)

    await message.answer(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ '{new_name}' –¥–æ–±–∞–≤–ª–µ–Ω.")
    await state.finish()

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ - –≤—ã–±–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@dp.callback_query_handler(lambda c: c.data.startswith("editname_"))
async def callback_editname_start(call: types.CallbackQuery, state: FSMContext):
    name = call.data[len("editname_"):]
    await call.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {name}:")
    await EditStaffName.waiting_new_name.set()
    await state.update_data(old_name=name)
    await call.answer()

@dp.message_handler(state=EditStaffName.waiting_new_name)
async def process_edit_staff_name(message: types.Message, state: FSMContext):
    new_name = message.text.strip()
    state_data = await state.get_data()
    old_name = state_data.get("old_name")

    if not new_name:
        await message.reply("–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return

    data = load_data()
    if new_name in data:
        await message.reply("–¢–∞–∫–æ–µ –∏–º—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        await state.finish()
        return

    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º
    data[new_name] = data.pop(old_name)
    save_data(data)

    await message.answer(f"–ò–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ '{old_name}' –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ '{new_name}'.")
    await state.finish()

# –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ - –≤—ã–±–æ—Ä
@dp.callback_query_handler(lambda c: c.data.startswith("delstaff_"))
async def callback_delstaff_start(call: types.CallbackQuery):
    name = call.data[len("delstaff_"):]
    data = load_data()
    if name in data:
        del data[name]
        save_data(data)
        await call.message.answer(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ '{name}' —É–¥–∞–ª—ë–Ω.")
    else:
        await call.message.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await call.answer()

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–∞ - –≤—ã–±–æ—Ä —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@dp.callback_query_handler(lambda c: c.data.startswith("editreport_"))
async def callback_edit_report_staff(call: types.CallbackQuery, state: FSMContext):
    name = call.data[len("editreport_"):]
    await call.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î) –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {name} (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-08-03):"
    )
    await EditReport.waiting_date.set()
    await state.update_data(staff_name=name)
    await call.answer()

# –í–≤–æ–¥ –¥–∞—Ç—ã
@dp.message_handler(state=EditReport.waiting_date)
async def process_edit_report_date(message: types.Message, state: FSMContext):
    date_text = message.text.strip()
    try:
        datetime.strptime(date_text, "%Y-%m-%d")
    except ValueError:
        await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(date=date_text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –¥–ª—è —ç—Ç–æ–π –¥–∞—Ç—ã:")
    await EditReport.waiting_new_count.set()

# –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ
@dp.message_handler(state=EditReport.waiting_new_count)
async def process_edit_report_count(message: types.Message, state: FSMContext):
    try:
        new_count = int(message.text)
        if new_count < 0:
            raise ValueError
    except ValueError:
        await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    state_data = await state.get_data()
    name = state_data['staff_name']
    date = state_data['date']

    data = load_data()
    if name not in data:
        await message.answer("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.finish()
        return

    data[name][date] = new_count
    save_data(data)

    await message.answer(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {name} –Ω–∞ –¥–∞—Ç—É {date} –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {new_count} —Ñ–æ—Ç–æ.")
    await state.finish()

# –°–æ–∑–¥–∞—ë–º –æ—Ç—á—ë—Ç (–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É)
def create_report():
    data = load_data()
    today = datetime.now().strftime("%Y-%m-%d")

    lines = [f"*–û—Ç—á—ë—Ç –∑–∞ {today}*:\n"]
    for name, records in data.items():
        day_count = records.get(today, 0)
        total_count = sum(records.values())
        lines.append(f"‚Ä¢ *{name}* ‚Äî —Å–µ–≥–æ–¥–Ω—è: _{day_count}_, –≤—Å–µ–≥–æ: _{total_count}_")

    return "\n".join(lines)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
@dp.callback_query_handler(lambda c: c.data in ['send_report', 'cancel_report'])
async def callback_confirm_report(call: types.CallbackQuery):
    if not is_admin(call.from_user.id):
        await call.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.", show_alert=True)
        return

    if call.data == 'send_report':
        report = create_report()
        await bot.send_message(GROUP_CHAT_ID, report, parse_mode='Markdown')
        reports_log.append({
            "timestamp": datetime.now().isoformat(),
            "report": report
        })
        save_log(reports_log)
        await call.message.edit_reply_markup()
        await call.answer("–û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    else:
        await call.message.edit_reply_markup()
        await call.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ –≤ 18:00
async def scheduled_report():
    while True:
        now = datetime.now()
        target = now.replace(hour=18, minute=0, second=0, microsecond=0)
        if now > target:
            target += timedelta(days=1)
        wait_seconds = (target - now).total_seconds()
        await asyncio.sleep(wait_seconds)
        report = create_report()
        await bot.send_message(GROUP_CHAT_ID, report, parse_mode='Markdown')


if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(init_db())
    loop.create_task(scheduled_report())
    executor.start_polling(dp, skip_updates=True)
